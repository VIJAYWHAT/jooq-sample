/*
 * This file is generated by jOOQ.
 */
package org.example.tables;


import java.util.Collection;

import org.example.Public;
import org.example.tables.records.MyTableRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MyTable extends TableImpl<MyTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.my_table</code>
     */
    public static final MyTable MY_TABLE = new MyTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyTableRecord> getRecordType() {
        return MyTableRecord.class;
    }

    /**
     * The column <code>public.my_table.my_value</code>.
     */
    public final TableField<MyTableRecord, String> MY_VALUE = createField(DSL.name("my_value"), SQLDataType.CHAR(1), this, "");

    private MyTable(Name alias, Table<MyTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MyTable(Name alias, Table<MyTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.my_table</code> table reference
     */
    public MyTable(String alias) {
        this(DSL.name(alias), MY_TABLE);
    }

    /**
     * Create an aliased <code>public.my_table</code> table reference
     */
    public MyTable(Name alias) {
        this(alias, MY_TABLE);
    }

    /**
     * Create a <code>public.my_table</code> table reference
     */
    public MyTable() {
        this(DSL.name("my_table"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public MyTable as(String alias) {
        return new MyTable(DSL.name(alias), this);
    }

    @Override
    public MyTable as(Name alias) {
        return new MyTable(alias, this);
    }

    @Override
    public MyTable as(Table<?> alias) {
        return new MyTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTable rename(String name) {
        return new MyTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTable rename(Name name) {
        return new MyTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTable rename(Table<?> name) {
        return new MyTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable where(Condition condition) {
        return new MyTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MyTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MyTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MyTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MyTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MyTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
